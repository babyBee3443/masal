
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Bir hikaye üretme yapay zeka ajanı.
 *
 * - generateStory - Hikaye üretme sürecini yöneten bir fonksiyon.
 * - GenerateStoryInput - generateStory fonksiyonu için giriş tipi.
 * - GenerateStoryOutput - generateStory fonksiyonu için dönüş tipi.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { StoryLength, StoryComplexity } from '@/lib/constants';

const GenerateStoryInputSchema = z.object({
  genre: z
    .string()
    .describe("Üretilecek hikayenin türü (örn. Korku, Macera, Romantik, Bilim Kurgu, Fabl, Felsefi)."),
  length: z.string().optional().describe("İstenen hikaye uzunluğu (örn. kısa, orta, uzun). Boş bırakılırsa model varsayılan uzunluğu kullanır."),
  complexity: z.string().optional().describe("İstenen hikaye karmaşıklığı ve detay seviyesi (örn. basit, orta, detaylı). Boş bırakılırsa model varsayılan karmaşıklığı kullanır."),
});
export type GenerateStoryInput = z.infer<typeof GenerateStoryInputSchema>;

// Schema for the output of the text generation prompt
const StoryTextOutputSchema = z.object({
  title: z.string().describe("Üretilen masalın başlığı."),
  content: z.string().describe("Üretilen masalın tam metin içeriği (belirtilen tüm bölümleri içermeli)."),
});
type StoryTextOutput = z.infer<typeof StoryTextOutputSchema>;

// Schema for the final output of the flow, including the image URL
const GenerateStoryOutputSchemaInternal = z.object({
  title: z.string().describe("Üretilen hikayenin başlığı."),
  content: z.string().describe("Üretilen hikayenin tam metin içeriği."),
  imageUrl: z.string().describe("Üretilen görseli içeren bir data URI. Beklenen format: 'data:<mimetype>;base64,<encoded_data>'"),
});
export type GenerateStoryOutput = z.infer<typeof GenerateStoryOutputSchemaInternal>; // Type export is fine

// This is the only function that should be exported for use by server actions or components.
export async function generateStory(input: GenerateStoryInput): Promise<GenerateStoryOutput> {
  return generateStoryFlow(input);
}

const generateStoryPrompt = ai.definePrompt({
  name: 'generateStoryPrompt',
  input: {schema: GenerateStoryInputSchema},
  output: {schema: StoryTextOutputSchema},
  prompt: `Yaratıcı bir hikaye yazarısın. Aşağıdaki türde bir hikaye yaz: {{{genre}}}.
{{#if length}}
Hikayenin uzunluğu yaklaşık olarak "{{length}}" olmalıdır.
{{else}}
Hikayenin uzunluğu modelin takdirine bırakılmıştır.
{{/if}}
{{#if complexity}}
Hikayenin karmaşıklığı ve detay seviyesi "{{complexity}}" olmalıdır.
{{else}}
Hikayenin karmaşıklığı ve detay seviyesi modelin takdirine bırakılmıştır.
{{/if}}

"kısa" uzunluk genellikle 3-5 paragraf, "orta" uzunluk 6-10 paragraf, "uzun" ise 10'dan fazla paragraf anlamına gelir.
"basit" karmaşıklık daha az karakter ve olay, doğrudan bir anlatım; "orta" karmaşıklık birkaç yan karakter ve olay örgüsü; "detaylı" karmaşıklık ise zengin karakter gelişimi, çoklu olay örgüleri ve derinlemesine bir anlatım anlamına gelir.

Bu hikayeyi Türkçe bir masal formatında oluşturmalısın. Masal yazarken aşağıdaki kurallara ve aşamalara uymalısın:

**Masal Yazma Kuralları ve Yapısı:**

1.  **Başlangıç (Döşeme Bölümü):**
    *   Masalına "Bir varmış bir yokmuş..." veya "Evvel zaman içinde..." gibi geleneksel bir tekerleme ile başla. Bu, dinleyicinin dikkatini çekmelidir.

2.  **Kahramanlar ve Konu (Serim ve Hazırlık Aşaması):**
    *   Masaldaki iyi ve kötü ana karakterleri belirginleştir.
    *   Yan karakterleri de tanımla (örneğin yardımcılar, engeller).
    *   Masalının ana konusunu (neyi anlatacağını) ve temasını belirle.
    *   Masaldaki temel sorunu veya problemi ortaya koy (örneğin, bir devin hazineyi koruması, bir prensesin kurtarılması gereken bir durum).
    *   Karakterlerin (insanlar, hayvanlar, olağanüstü varlıklar) özelliklerini belirle.
    *   Yer ve zamanı genel ifadelerle belirt (örneğin, "Uzak bir diyarda...", "Çok eski zamanlarda...", "Devler ülkesinde...").

3.  **Gelişme ve Problem Çözümü (Düğüm ve Planlama Aşaması):**
    *   Olayları geliştir. Problemler iyice belirginleşsin. İyilerle kötüler arasındaki ayrım netleşsin.
    *   Okuyucunun merak duygusunu canlı tutarak olayları detaylandır.
    *   Problemi nasıl çözeceğine dair bir plan oluştur. Kahraman hazineye ulaşmak için devi nasıl yenecek? Prenses nasıl kurtulacak? Olağanüstü olaylar ve varlıklar bu aşamada önemli rol oynayabilir.

4.  **Sonuç (Çözüm Aşaması):**
    *   Düğüm bölümünde gelişen olaylar ve ortaya konan sorunlar bu bölümde çözüme kavuşur.
    *   İyiler her zaman kazanır ve amaçlarına ulaşır. Kötüler ise cezalandırılır.

5.  **Bitiş ve İyi Dilekler (Dilek Bölümü):**
    *   Masalın sonunda iyi dileklerde bulunarak hikayeni sonlandır.
    *   "Onlar ermiş muradına, biz çıkalım kerevetine." gibi kalıplaşmış sözler veya benzeri iyi dilek ifadeleri kullan.

**Masal Yazma Aşamaları (Özet):**
*   **Hazırlık:** Konu, tema, karakterler ve özellikleri.
*   **Planlama:** Olay örgüsü; döşeme, serim, düğüm, çözüm, dilek bölümlerinin belirlenmesi.
*   **Taslak Metin Oluşturma:** Plana sadık kalarak masalı yazma. Olağanüstü kişileri ve unsurları kullanma. Dilek bölümünü yazma.
*   **(Model için Not: Düzeltme ve Geliştirme aşamasını kullanıcı yapacak, sen sadece tutarlı bir ilk taslak oluştur.)**

**İstenen Çıktı (Sadece Metin):**
Bu masalla ilişkili olarak aşağıdaki bilgileri JSON formatında döndürmelisin:
*   \`title\`: Üretilen masalın başlığı.
*   \`content\`: Üretilen masalın tam metin içeriği (yukarıdaki tüm bölümleri içermeli).

Lütfen hikayeyi akıcı bir Türkçe ile yaz ve masalın büyülü atmosferini yansıt. Görsel üretimi bu adımın bir parçası DEĞİLDİR, sadece başlık ve içerik üret.`,
});

const generateStoryFlow = ai.defineFlow(
  {
    name: 'generateStoryFlow',
    inputSchema: GenerateStoryInputSchema,
    outputSchema: GenerateStoryOutputSchemaInternal, // Final output schema for the flow
  },
  async input => {
    // Generate story text (title and content)
    const storyTextResult = await generateStoryPrompt(input);

    if (!storyTextResult.output || !storyTextResult.output.title || !storyTextResult.output.content) {
      throw new Error('Hikaye başlığı veya içeriği üretilemedi.');
    }

    const { title, content } = storyTextResult.output;

    // Generate image based on the story title/content
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: `"${title}" başlıklı masal için fantastik ve masalsı bir illüstrasyon oluştur. Masalın konusu: ${content.substring(0, 200)}...`, // Use title and a snippet of content for image prompt
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media || !media.url) {
      throw new Error('Hikaye için görsel üretilemedi veya görsel URLsi alınamadı.');
    }

    return {
      title: title,
      content: content,
      imageUrl: media.url,
    };
  }
);
