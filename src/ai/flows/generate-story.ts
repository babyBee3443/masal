// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A story generation AI agent.
 *
 * - generateStory - A function that handles the story generation process.
 * - GenerateStoryInput - The input type for the generateStory function.
 * - GenerateStoryOutput - The return type for the generateStory function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateStoryInputSchema = z.object({
  genre: z
    .string()
    .describe("The genre of the story to generate (e.g., Horror, Adventure, Romance, Sci-Fi, Fable, Philosophical)."),
});
export type GenerateStoryInput = z.infer<typeof GenerateStoryInputSchema>;

const GenerateStoryOutputSchema = z.object({
  title: z.string().describe("The title of the generated story."),
  content: z.string().describe("The full text content of the generated story."),
  imageUrl: z.string().describe("A data URI containing the generated image. Expected format: 'data:<mimetype>;base64,<encoded_data>'"),
});
export type GenerateStoryOutput = z.infer<typeof GenerateStoryOutputSchema>;

export async function generateStory(input: GenerateStoryInput): Promise<GenerateStoryOutput> {
  return generateStoryFlow(input);
}

const generateStoryPrompt = ai.definePrompt({
  name: 'generateStoryPrompt',
  input: {schema: GenerateStoryInputSchema},
  output: {schema: GenerateStoryOutputSchema},
  prompt: `You are a creative story writer. Write a story of the following genre: {{{genre}}}. Return the title, content, and data URI of an image associated with this story.`,
});

const generateStoryFlow = ai.defineFlow(
  {
    name: 'generateStoryFlow',
    inputSchema: GenerateStoryInputSchema,
    outputSchema: GenerateStoryOutputSchema,
  },
  async input => {
    const story = await generateStoryPrompt(input);

    const {media} = await ai.generate({
      // IMPORTANT: ONLY the googleai/gemini-2.0-flash-exp model is able to generate images. You MUST use exactly this model to generate images.
      model: 'googleai/gemini-2.0-flash-exp',

      // simple prompt
      prompt: `Generate an image of ${story.output!.title}`,

      config: {
        responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
      },
    });

    return {
      title: story.output!.title,
      content: story.output!.content,
      imageUrl: media.url!,
    };
  }
);
