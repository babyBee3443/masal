
// This is an autogenerated file from Firebase Studio.
'use client'; 

import { useEffect, useState, useTransition } from 'react';
import Link from 'next/link';
import type { Story } from '@/lib/types';
import { getStories, updateStory } from '@/lib/mock-db'; 
import { AdminStoryControls } from '@/components/admin/AdminStoryControls';
import { GenerateStorySection } from '@/components/admin/GenerateStorySection';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Loader2, AlertTriangle, Inbox, CalendarCog, Repeat, Info, CheckCircle } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { parseISO, isValid } from 'date-fns';

export default function AdminPage() {
  const [stories, setStories] = useState<Story[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isRefreshing, startRefreshTransition] = useTransition();
  const { toast } = useToast();
  const [autoPublicationAttempted, setAutoPublicationAttempted] = useState(false);

  const fetchStories = async (isManualRefresh = false) => {
    if(!isManualRefresh) setIsLoading(true);
    setError(null);
    try {
      let fetchedStories = await getStories();
      
      // Automatic Publication Check
      if (!autoPublicationAttempted || isManualRefresh) {
        const now = new Date();
        let publishedCount = 0;
        const storiesToUpdatePromises = fetchedStories
          .filter(story => 
            story.status === 'pending' && 
            story.scheduledAtDate && 
            story.scheduledAtTime
          )
          .filter(story => {
            try {
              const scheduledDateTime = parseISO(`${story.scheduledAtDate}T${story.scheduledAtTime}`);
              return isValid(scheduledDateTime) && scheduledDateTime <= now;
            } catch {
              return false;
            }
          })
          .map(story => {
            publishedCount++;
            return updateStory(story.id, {
              status: 'published',
              publishedAt: now.toISOString(),
              scheduledAtDate: undefined, // Clear schedule
              scheduledAtTime: undefined,
            });
          });

        if (storiesToUpdatePromises.length > 0) {
          if (isManualRefresh) {
             toast({
                title: "Otomatik Yayın Kontrolü",
                description: `${storiesToUpdatePromises.length} adet zamanı gelmiş hikaye yayınlanıyor...`
            });
          }
          await Promise.all(storiesToUpdatePromises);
          fetchedStories = await getStories(); // Re-fetch after updates
           if (publishedCount > 0 && isManualRefresh) { // Only show success toast on manual refresh to avoid spam
            toast({
                variant: "default",
                title: "Hikayeler Otomatik Yayınlandı",
                description: `${publishedCount} hikaye başarıyla yayınlandı.`,
                action: <CheckCircle className="text-green-500" />,
            });
           }
        }
        if (!autoPublicationAttempted) setAutoPublicationAttempted(true);
      }


      fetchedStories.sort((a, b) => {
        if (a.status === 'pending' && b.status !== 'pending') return -1;
        if (a.status !== 'pending' && b.status === 'pending') return 1;
        
        if (a.status === 'pending' && b.status === 'pending') {
          if (a.scheduledAtDate && b.scheduledAtDate) {
            const dateA = new Date(`${a.scheduledAtDate}T${a.scheduledAtTime || '00:00'}`);
            const dateB = new Date(`${b.scheduledAtDate}T${b.scheduledAtTime || '00:00'}`);
            if (dateA.getTime() !== dateB.getTime()) {
              return dateA.getTime() - dateB.getTime();
            }
          } else if (a.scheduledAtDate) {
            return -1; 
          } else if (b.scheduledAtDate) {
            return 1;  
          }
        }
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      });
      setStories(fetchedStories);
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Hikayeler yüklenemedi.');
      console.error(e);
    } finally {
      if(!isManualRefresh) setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchStories(false); // Initial fetch and auto-publication check
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleStoryGeneratedOrUpdated = () => {
    startRefreshTransition(() => {
      fetchStories(true); // Manual refresh implies re-checking publications too
    });
  };
  
  const pendingStories = stories.filter(s => s.status === 'pending');
  const publishedStories = stories.filter(s => s.status === 'published');

  if (isLoading && stories.length === 0) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-lg text-muted-foreground">Hikayeler yükleniyor ve kontrol ediliyor...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-10 text-red-600 bg-red-50 p-6 rounded-lg shadow-md">
        <AlertTriangle className="mx-auto h-12 w-12 mb-4" />
        <h2 className="text-2xl font-semibold mb-2">Hikayeler Yüklenirken Hata Oluştu</h2>
        <p>{error}</p>
        <button onClick={() => fetchStories(true)} className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
          Tekrar Dene
        </button>
      </div>
    );
  }
  
  const renderStoryList = (storyList: Story[], listTitle: string) => {
    if (storyList.length === 0) {
      return (
        <div className="text-center py-10 text-muted-foreground bg-card p-6 rounded-lg shadow">
          <Inbox className="mx-auto h-12 w-12 mb-4" />
          <p className="text-lg">Şu anda hiç {listTitle.toLowerCase()} hikaye yok.</p>
        </div>
      );
    }
    return (
      <div className="space-y-6">
        {storyList.map(story => (
          <AdminStoryControls 
            key={story.id} 
            story={story} 
            onStoryUpdate={handleStoryGeneratedOrUpdated}
          />
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
        <h1 className="text-3xl md:text-4xl font-bold text-foreground tracking-tight">Hikaye Yönetimi</h1>
        <div className="flex gap-2 flex-wrap">
          <Button asChild variant="outline">
            <Link href="/admin/scheduling">
              <CalendarCog className="mr-2 h-5 w-5" />
              Tarih Bazlı Planlama
            </Link>
          </Button>
          <Button asChild variant="outline">
            <Link href="/admin/weekly-schedule">
              <Repeat className="mr-2 h-5 w-5" />
              Haftalık Planlama
            </Link>
          </Button>
        </div>
      </div>
      
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 rounded-md shadow" role="alert">
        <div className="flex items-center">
          <Info className="h-6 w-6 mr-3" />
          <div>
            <p className="font-bold">Otomatik Yayınlama Bilgisi</p>
            <p className="text-sm">Bu sayfa yüklendiğinde veya "Hikaye Kuyruğu" başlığının yanındaki yenile butonuna tıklandığında, yayınlanma zamanı gelmiş "beklemede" olan hikayeler otomatik olarak yayınlanır. Sürekli bir arka plan kontrolü bulunmamaktadır.</p>
          </div>
        </div>
      </div>

      <GenerateStorySection onStoryGenerated={handleStoryGeneratedOrUpdated} />

      <Separator className="my-8" />
      
      <div className="flex items-center mb-4">
        <h2 className="text-2xl md:text-3xl font-semibold text-foreground tracking-tight">
            Hikaye Kuyruğu 
        </h2>
        <Button onClick={() => startRefreshTransition(() => fetchStories(true))} variant="ghost" size="icon" className="ml-2" disabled={isRefreshing}>
            <Loader2 className={`h-6 w-6 ${isRefreshing ? 'animate-spin' : ''}`} />
        </Button>
      </div>

      <Tabs defaultValue="pending" className="w-full">
        <TabsList className="grid w-full grid-cols-2 md:w-1/2 mb-6">
          <TabsTrigger value="pending">Bekleyen ({pendingStories.length})</TabsTrigger>
          <TabsTrigger value="published">Yayınlanmış ({publishedStories.length})</TabsTrigger>
        </TabsList>
        <TabsContent value="pending">
          {renderStoryList(pendingStories, "Bekleyen")}
        </TabsContent>
        <TabsContent value="published">
          {renderStoryList(publishedStories, "Yayınlanmış")}
        </TabsContent>
      </Tabs>
    </div>
  );
}

    