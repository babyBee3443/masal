
// This is an autogenerated file from Firebase Studio.
'use client';

import { useEffect, useState, useTransition } from 'react';
import type { StoryGenre, WeeklyScheduleItem, DayOfWeek, Story } from '@/lib/types';
import { GENRES } from '@/lib/constants';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { saveWeeklyScheduleSlotAction, generateNewStoryAction } from '@/lib/actions'; 
import { 
    addStory as dbAddStory,
    getLastWeeklyCheckTime, 
    setLastWeeklyCheckTime, 
    getWeeklySchedules as dbGetWeeklySchedules,
    upsertWeeklySchedule as dbUpsertWeeklySchedule,
    deleteWeeklyScheduleByDayTime as dbDeleteWeeklyScheduleByDayTime
} from '@/lib/mock-db'; 
import { Loader2, AlertTriangle, Save, Trash2, PlusCircle, Clock, Info, CheckCircle } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import { Label } from '@/components/ui/label';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

const DAYS_OF_WEEK: { name: string; value: DayOfWeek }[] = [
  { name: "Pazartesi", value: 0 },
  { name: "Salı", value: 1 },
  { name: "Çarşamba", value: 2 },
  { name: "Perşembe", value: 3 },
  { name: "Cuma", value: 4 },
  { name: "Cumartesi", value: 5 },
  { name: "Pazar", value: 6 },
];

const HOURS_OF_DAY: string[] = Array.from({ length: 24 }, (_, i) => `${String(i).padStart(2, '0')}:00`);

interface ScheduleCell {
  day: DayOfWeek;
  time: string;
  genre?: StoryGenre;
  scheduleItemId?: string;
}

export default function WeeklySchedulePage() {
  const [schedules, setSchedules] = useState<WeeklyScheduleItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isTransitioning, startTransition] = useTransition();
  const { toast } = useToast();

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentCell, setCurrentCell] = useState<ScheduleCell | null>(null);
  const [selectedGenre, setSelectedGenre] = useState<StoryGenre | undefined>(undefined);
  const [isCheckingWeekly, setIsCheckingWeekly] = useState(false);

  const fetchSchedules = async (showLoadingSpinner = true) => {
    if (showLoadingSpinner) setIsLoading(true);
    setError(null);
    try {
      const fetchedSchedules = await dbGetWeeklySchedules();
      setSchedules(fetchedSchedules);
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Haftalık planlar yüklenemedi.');
      toast({ variant: 'destructive', title: 'Yükleme Hatası', description: e instanceof Error ? e.message : 'Haftalık planlar yüklenemedi.' });
    } finally {
      if (showLoadingSpinner) setIsLoading(false);
    }
  };

  const checkAndRunWeeklyGenerations = async () => {
    if (isCheckingWeekly) return;
    setIsCheckingWeekly(true);
    toast({ title: "Haftalık Plan Kontrolü", description: "Otomatik üretimler kontrol ediliyor..."});
    
    let generatedCount = 0;
    try {
        const now = new Date();
        const currentDay = (now.getDay() + 6) % 7 as DayOfWeek; 
        const currentTime = `${String(now.getHours()).padStart(2, '0')}:00`;

        const allSchedulesFromDb = await dbGetWeeklySchedules(); 
        const lastCheckTimeString = await getLastWeeklyCheckTime();
        
        const oneHourInMs = 60 * 60 * 1000;
        const oneHourAgo = new Date(now.getTime() - oneHourInMs).toISOString();

        if (lastCheckTimeString && new Date(lastCheckTimeString).getTime() > new Date(oneHourAgo).getTime()) {
            console.log("Haftalık kontrol yakın zamanda yapılmış, atlanıyor. Son kontrol:", lastCheckTimeString);
            toast({ title: "Haftalık Plan Kontrolü", description: "Kontrol yakın zamanda yapılmış, atlanıyor."});
            setIsCheckingWeekly(false);
            return;
        }

        const dueSchedules = allSchedulesFromDb.filter(
            (s) => s.dayOfWeek === currentDay && s.time === currentTime
        );

        if (dueSchedules.length === 0) {
            console.log("Şu an için zamanı gelmiş haftalık plan yok.");
            toast({ title: "Haftalık Plan Kontrolü", description: "Şu an için zamanı gelmiş haftalık plan yok."});
        } else {
           toast({ title: "Haftalık Plan Kontrolü", description: `${dueSchedules.length} adet zamanı gelmiş plan bulundu, üretim başlatılıyor...`});
        }

        for (const schedule of dueSchedules) {
            console.log(`[WeeklyGen] ${schedule.genre} türü için üretim deneniyor (Gün: ${schedule.dayOfWeek}, Saat: ${schedule.time})`);
            // Call generateNewStoryAction which is a server action for AI
            const result = await generateNewStoryAction(schedule.genre); 
            if (result.success && result.storyData) {
                // Add story to localStorage via mock-db
                const newStory = await dbAddStory(result.storyData); 
                generatedCount++;
                toast({
                    variant: "default",
                    title: "Haftalık Hikaye Üretildi!",
                    description: `"${newStory.title}" (${schedule.genre}) planlandığı gibi başarıyla oluşturuldu ve admin kuyruğuna eklendi.`,
                    action: <CheckCircle className="text-green-500" />,
                });
            } else {
                toast({
                    variant: "destructive",
                    title: "Haftalık Üretim Başarısız",
                    description: `${schedule.genre} türündeki hikaye üretilemedi: ${result.error || 'Bilinmeyen hata.'}`,
                });
                 console.error(`[WeeklyGen] ${schedule.genre} üretimi başarısız: ${result.error}`);
            }
        }
        
        await setLastWeeklyCheckTime(now.toISOString());
        console.log("Haftalık kontrol tamamlandı. Son kontrol zamanı güncellendi:", now.toISOString());

    } catch (e) {
        console.error("Haftalık plan kontrolü/üretimi sırasında hata:", e);
        toast({ variant: 'destructive', title: 'Haftalık Kontrol Hatası', description: e instanceof Error ? e.message : 'Bilinmeyen bir hata oluştu.' });
    } finally {
        setIsCheckingWeekly(false);
        if (generatedCount > 0) {
            // Optionally, trigger a refresh of admin page or relevant story lists if needed
            // For now, admin page refresh will pick up new stories in "pending"
        }
    }
  };


  useEffect(() => {
    fetchSchedules();
    checkAndRunWeeklyGenerations(); 
    const intervalId = setInterval(checkAndRunWeeklyGenerations, 30 * 60 * 1000); 
    return () => clearInterval(intervalId); 
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleCellClick = (day: DayOfWeek, time: string) => {
    const existingSchedule = schedules.find(s => s.dayOfWeek === day && s.time === time);
    setCurrentCell({ 
      day, 
      time, 
      genre: existingSchedule?.genre, 
      scheduleItemId: existingSchedule?.id 
    });
    setSelectedGenre(existingSchedule?.genre);
    setIsModalOpen(true);
  };

  const handleSaveSlot = () => {
    if (!currentCell) return;
    const { day, time } = currentCell;
    const genreToSave = selectedGenre || null;

    startTransition(async () => {
      // Call server action to validate/prepare data
      const actionResult = await saveWeeklyScheduleSlotAction(day, time, genreToSave);
      
      if (actionResult.success && actionResult.slotToSave) {
        // Use mock-db to update localStorage
        if (actionResult.slotToSave.genre) {
            await dbUpsertWeeklySchedule({ 
                dayOfWeek: actionResult.slotToSave.dayOfWeek, 
                time: actionResult.slotToSave.time, 
                genre: actionResult.slotToSave.genre 
            });
        } else {
            await dbDeleteWeeklyScheduleByDayTime(actionResult.slotToSave.dayOfWeek, actionResult.slotToSave.time);
        }
        
        toast({ title: 'Plan Güncellendi', description: `${DAYS_OF_WEEK.find(d=>d.value === day)?.name} ${time} için plan ${genreToSave ? genreToSave + ' olarak ayarlandı.' : 'temizlendi.'}` });
        setIsModalOpen(false);
        await fetchSchedules(false); // Re-fetch from localStorage to update UI
      } else {
        toast({ variant: 'destructive', title: 'Kaydetme Hatası', description: actionResult.error || "Bilinmeyen bir hata oluştu." });
      }
    });
  };
  
  const handleClearSlot = () => {
    if (!currentCell) return;
    const { day, time } = currentCell;
     startTransition(async () => {
      // Call server action to validate/prepare (genre will be null)
      const actionResult = await saveWeeklyScheduleSlotAction(day, time, null); 
      
      if (actionResult.success) {
        // Use mock-db to delete from localStorage
        await dbDeleteWeeklyScheduleByDayTime(day, time);
        
        toast({ title: 'Plan Temizlendi', description: `${DAYS_OF_WEEK.find(d=>d.value === day)?.name} ${time} için plan temizlendi.` });
        setIsModalOpen(false);
        setSelectedGenre(undefined); 
        await fetchSchedules(false); // Re-fetch from localStorage to update UI
      } else {
        toast({ variant: 'destructive', title: 'Temizleme Hatası', description: actionResult.error || "Bilinmeyen bir hata oluştu." });
      }
    });
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-lg text-muted-foreground">Haftalık plan yükleniyor...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-10 text-red-600 bg-red-50 p-6 rounded-lg shadow-md">
        <AlertTriangle className="mx-auto h-12 w-12 mb-4" />
        <h2 className="text-2xl font-semibold mb-2">Plan Yüklenirken Hata Oluştu</h2>
        <p>{error}</p>
        <Button onClick={() => fetchSchedules(true)} variant="destructive" className="mt-4">Tekrar Dene</Button>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
        <h1 className="text-3xl md:text-4xl font-bold text-foreground tracking-tight">Haftalık Hikaye Üretim Planı</h1>
         <Button onClick={checkAndRunWeeklyGenerations} disabled={isCheckingWeekly || isTransitioning} variant="outline">
          {isCheckingWeekly ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Clock className="mr-2 h-4 w-4" />}
          Şimdi Haftalık Planı Kontrol Et
        </Button>
      </div>
       <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 rounded-md shadow" role="alert">
        <div className="flex items-center">
          <Info className="h-6 w-6 mr-3" />
          <div>
            <p className="font-bold">Otomatik Haftalık Üretim Bilgisi</p>
            <p className="text-sm">Bu sayfada tanımlanan haftalık planlar, belirtilen gün ve saatlerde otomatik hikaye üretimleri için bir şablondur. Bu sayfa açıkken, yaklaşık saat başlarında (veya 30 dk aralıklarla) veya "Şimdi Haftalık Planı Kontrol Et" butonuna tıklandığında, zamanı gelmiş ve son bir saat içinde işlenmemiş planlar için hikaye üretimi tetiklenmeye çalışılır. Üretilen hikayeler admin panelindeki "Hikaye Kuyruğu" bölümüne "Beklemede" olarak eklenir. Veriler tarayıcınızın yerel depolamasında saklanır.</p>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto bg-card p-4 sm:p-6 rounded-lg shadow-lg">
        <Table className="min-w-full border-collapse">
          <TableHeader>
            <TableRow className="bg-muted/50">
              <TableHead className="w-24 sticky left-0 bg-card z-10 py-3 px-4 font-semibold text-foreground">Saat</TableHead>
              {DAYS_OF_WEEK.map(day => (
                <TableHead key={day.value} className="py-3 px-4 text-center font-semibold text-foreground whitespace-nowrap">{day.name}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {HOURS_OF_DAY.map(hour => (
              <TableRow key={hour} className="hover:bg-muted/20 transition-colors duration-150 group">
                <TableCell className="sticky left-0 bg-card group-hover:bg-muted/20 py-3 px-4 font-medium text-muted-foreground z-10 whitespace-nowrap">{hour}</TableCell>
                {DAYS_OF_WEEK.map(day => {
                  const schedule = schedules.find(s => s.dayOfWeek === day.value && s.time === hour);
                  return (
                    <TableCell 
                      key={`${day.value}-${hour}`} 
                      className="py-2 px-1.5 text-center border cursor-pointer hover:bg-accent/20 transition-colors duration-150 h-16"
                      onClick={() => handleCellClick(day.value, hour)}
                      title={`${day.name} ${hour} için plan ${schedule ? schedule.genre : 'oluştur/düzenle'}`}
                    >
                      {schedule ? (
                        <div className="bg-primary/10 text-primary font-medium p-2 rounded-md text-xs h-full flex items-center justify-center">
                          {schedule.genre}
                        </div>
                      ) : (
                        <div className="text-muted-foreground/50 hover:text-primary h-full flex items-center justify-center">
                          <PlusCircle className="h-5 w-5"/>
                        </div>
                      )}
                    </TableCell>
                  );
                })}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {currentCell && (
        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Planı Düzenle: {DAYS_OF_WEEK.find(d=>d.value === currentCell.day)?.name} - {currentCell.time}</DialogTitle>
              <DialogDescription>
                Bu zaman dilimi için bir hikaye türü seçin veya planı temizleyin.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="genre-select-modal" className="text-right col-span-1">
                  Tür
                </Label>
                <div className="col-span-3">
                  <Select value={selectedGenre} onValueChange={(value) => setSelectedGenre(value as StoryGenre)}>
                    <SelectTrigger id="genre-select-modal">
                      <SelectValue placeholder="Bir tür seçin..." />
                    </SelectTrigger>
                    <SelectContent>
                      {GENRES.map(g => <SelectItem key={g} value={g}>{g}</SelectItem>)}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
            <DialogFooter className="flex-col sm:flex-row sm:justify-between gap-2">
              <Button 
                onClick={handleClearSlot} 
                variant="destructive" 
                disabled={isTransitioning || !currentCell.genre}
              >
                {isTransitioning && currentCell.genre && !selectedGenre ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
                Planı Temizle
              </Button>
              <div className="flex flex-col sm:flex-row gap-2 sm:justify-end">
                <DialogClose asChild>
                  <Button variant="outline">İptal</Button>
                </DialogClose>
                <Button 
                  onClick={handleSaveSlot} 
                  disabled={isTransitioning || selectedGenre === currentCell.genre}
                >
                  {isTransitioning && (selectedGenre !== currentCell.genre) ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                  Kaydet
                </Button>
              </div>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
